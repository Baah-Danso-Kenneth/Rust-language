/** Reassigning a varable**/
 By default Variables aree immmutable meaning they cant be change
 In order to change them you have to use "mut" attached to the variables to change them:

 
 fun main(){
    let mut x = 20;
    println!("The number of x is :{x}");
    let x=32;
    println!("The number of x is : {x}");
 }

 In this case we have used Mutability which allows us to change x value

/**const**/
 with [const] they are immutable at defining and reaassign a variable 
 Meaning as long as a variable is defined with a const it cannot be changed or reassigned it does not even take [mut]

 The naming conventions of a const must be :   eg:  const THREE_HOUR_SECOND: u32= 60 * 60 * 3;

 capital letters and seperated by a hiphen;

 Shadowing:
 With shadowing a variable is created with a let key word and later we reassigned that same value using the let key word with the same name:
 let x=5;
 let x=x+6;

 Rust is a statically typed language which means it must know the value of every variable or object at compile time

/**DATA TYPES**/
-Scalar types
-Compound types

 A scalar types reperesent a single value.
 Rust has four primary scalar types
 - integer types
 Integers can either be signed or unsigned:
 Unasigned Integers(Positive) Integers basically refers to values without - sign:
 20,
 Signed Integers have - associatiate with their values:
 eg: -20

 u32 means that a particular variable can take up to 32 bits of space

 - Float types
 - Boolean types
 - numeric operation types
 - Characters


-Compound types
***************
This are group of group multiple values into one type:
which means a group of elements being placed and stored in a single value:
they include: Arrays, Tuple


fn main(){
   let tup:(i32, f64, u8) = (500,6.4,1)
}

Another way can also access the values of the tuple by the name given to it and its index;
eg: 

Arrays:
******
Arrays in Rust must have the same data type, they must also have a fixed number
So when you want to ensure you have a fixed number of element use an array;

To access an array:
let a = [2,4,6,0]
a[0] and will get the first number;

Functions
**********
The main function is the entry point of the rust application:
Rust uses snake case for naming both variables and functions:
eg: let mut the_is_a_varible:&str = 20
    fn this_is_a_function(){}


Statement are instruction that performs an action but do not return a value
Expression = evaluates to a result value;

In a rust when we end a line witht the semicolon it basically a statment;
eg: let x=20;
    x + 1

    The above is an expression so concluding it with ";" will turn it into a Statement
Callling a function is an expression;
Calling a macro is also an expression;

Defining a function is a Statement

When returning a value make sure it does not end with a ";" because it will be treated as a statment which might result in an error


Conditional 
************
Rust ensures that the if statemets must be a boolean before the it runs:

let number=6;

if number > 3 {
    println!("Super duper")
}
else if {
    println!("Not sure)
}
else{
    println!("Wicked")
}

NB: There are no ( ) assioted with the condition 

NB:
you can bind a variable to the if else statement and it will work
all you have to do is to ensure that both the if block and the else block have the same variable:
ie: let number = true
    
    let a = if number{10} else{20}

    println!("this will be {a}");

    this will work However when both arms ie have different types it will not rust will give us an error